#### Contents of the preconfiguration file (for stretch)
### Localization
# Preseeding only locale sets language, country and locale.
#
# SiDEUS Technologies
# SiDEUS Computers
# SiLOX OS (Liquid Oxygen)
# Copyright 2018 - SiDEUS Technologies - Dwayne Tauzin - d.tauzin@gmail.com
#
# Keyboard selection.
d-i keyboard-configuration/xkb-keymap select us

# If non-free firmware is needed to always try to load it, without prompting.
d-i hw-detect/load_firmware boolean true
# d-i preseed/early_command string kill-all-dhcp; netcfg anna-install some-udeb

### Network configuration
d-i netcfg/enable boolean true

# netcfg will choose an interface that has link if possible.
d-i netcfg/choose_interface select auto

# To pick a particular interface instead:
d-i netcfg/choose_interface select eth1
d-i netcfg/choose_interface select wlan0

# To set a different link detection timeout (default is 3 seconds).
d-i netcfg/link_wait_timeout string 10

# If you have a slow dhcp server and the installer times out, this might be useful.
d-i netcfg/dhcp_timeout string 60
d-i netcfg/dhcpv6_timeout string 60

# If you prefer to configure the network manually, uncomment this line and
# the static network configuration below.
# d-i netcfg/disable_autoconfig boolean true

# If you want the preconfiguration file to work on systems both with and
# without a dhcp server, uncomment these lines and the static network
# configuration below.
# d-i netcfg/dhcp_failed note
# d-i netcfg/dhcp_options select Configure network manually

# Static network configuration.
# IPv4 example
# d-i netcfg/get_ipaddress string 192.168.1.42
# d-i netcfg/get_netmask string 255.255.255.0
# d-i netcfg/get_gateway string 192.168.1.1
# d-i netcfg/get_nameservers string 192.168.1.1
# d-i netcfg/confirm_static boolean true
#
# IPv6 example
# d-i netcfg/get_ipaddress string fc00::2
# d-i netcfg/get_netmask string ffff:ffff:ffff:ffff::
# d-i netcfg/get_gateway string fc00::1
# d-i netcfg/get_nameservers string fc00::1
# d-i netcfg/confirm_static boolean true

# Setting the values prevents the questions from being shown, even if values come from dhcp.
d-i netcfg/get_hostname string SiLOX
d-i netcfg/get_domain string WORKGROUP

# If you want to force a hostname, regardless of what either the DHCP
# server returns or what the reverse DNS entry for the IP is, uncomment
# and adjust the following line.
d-i netcfg/hostname string SiLOX

# Disable that annoying WEP key dialog.
d-i netcfg/wireless_wep string
d-i netcfg/wireless_wpa string

# The wacky dhcp hostname that some ISPs use as a password of sorts.
# d-i netcfg/dhcp_hostname string radish

### Network console
# Use the following settings if you wish to make use of the network-console
# component for remote installation over SSH. This only makes sense if you
# intend to perform the remainder of the installation manually.
# d-i anna/choose_modules string network-console
# d-i network-console/authorized_keys_url string http://10.0.0.1/openssh-key
# d-i network-console/password password r00tme
# d-i network-console/password-again password r00tme

### Mirror settings
d-i mirror/country string manual
d-i mirror/http/hostname string http.us.debian.org
d-i mirror/http/directory string /debian

# Suite to install.
d-i mirror/suite string stable
# Suite to use for loading installer components (optional).
d-i mirror/udeb/suite string stable

### Account setup
# Root password, either in clear text
d-i passwd/root-password password user
d-i passwd/root-password-again password user

# To create a normal user account.
d-i passwd/user-fullname string SiLOX OS User
d-i passwd/username string user
# Normal user's password, either in clear text
d-i passwd/user-password password user
d-i passwd/user-password-again password user

# To add the user account to some initial groups.
d-i passwd/user-default-groups string adm audio cdrom games root sudo user users video 

### Clock and time zone setup is set to UTC.
d-i clock-setup/utc boolean true

# You may set this to any valid $TZ; contents of $TZ info /usr/share/zoneinfo/ for valid values.
d-i time/zone string US/Central

# Controls whether to use NTP to set the clock during the install
d-i clock-setup/ntp boolean true

### Partitioning
## Partitioning example
# If the system has free space you can choose to only partition that space.
# This is only honoured if partman-auto/method (below) is not set.
d-i partman-auto/init_automatically_partition select biggest_free

# Alternatively, you may specify a disk to partition. If the system has only
# one disk the installer will default to using that, but otherwise the device
# name must be given in traditional, non-devfs format (so e.g. /dev/sda
# and not e.g. /dev/discs/disc0/disc).
# For example, to use the first SCSI/SATA hard disk:
# d-i partman-auto/disk string /dev/sda /dev/sdb /dev/sdc /dev/sdd /dev/sde /dev/sdf
# In addition, you'll need to specify the method to use.
# The presently available methods are:
# - regular: use the usual partition types for your architecture
# - lvm:     use LVM to partition the disk
# - crypto:  use LVM within an encrypted partition
d-i partman-auto/method string regular

# If one of the disks that are going to be automatically partitioned
# contains an old LVM configuration, the user will normally receive a
# warning. This can be preseeded away...
# d-i partman-lvm/device_remove_lvm boolean true
# The same applies to pre-existing software RAID array:
# d-i partman-md/device_remove_md boolean true
# And the same goes for the confirmation to write the lvm partitions.
# d-i partman-lvm/confirm boolean true
# d-i partman-lvm/confirm_nooverwrite boolean true

# You can choose one of the three predefined partitioning recipes:
# - atomic: all files in one partition
# - home:   separate /home partition
# - multi:  separate /home, /var, and /tmp partitions
# d-i partman-auto/choose_recipe select home

# Or provide a recipe of your own...
# If you have a way to get a recipe file into the d-i environment, you can
# just point at it.
# d-i partman-auto/expert_recipe_file string /hd-media/recipe

# If not, you can put an entire recipe into the preconfiguration file in one
# (logical) line. This example creates a small /boot partition, suitable
# swap, and uses the rest of the space for the root partition:
#
d-i partman-auto/expert_recipe string			\
      boot-root ::					\
		18432 10000 18432 ext4			\
			$bootable{ }			\
			method{ format }		\
			format{ }			\
			use_filesystem{ }		\
			filesystem{ ext4 }		\
			mountpoint{ / }			\
			label{ SiLOX }			\
		.					\
		2560 10000 2560 linux-swap		\
			method{ swap }			\
			format{ }			\
		.					\
		8192 9000 -1 ext4			\
			method{ format }		\
			format{ }			\
			use_filesystem{ }		\
			filesystem{ ext4 }		\
			mountpoint{ /home }		\
			label{ Home }			\
		.

# The full recipe format is documented in the file partman-auto-recipe.txt
# included in the 'debian-installer' package or available from D-I source
# repository. This also documents how to specify settings such as file
# system labels, volume group names and which physical devices to include
# in a volume group.

# This makes partman automatically partition without confirmation, provided
# that you told it what to do using one of the methods above.
# d-i partman-partitioning/confirm_write_new_label boolean false
# d-i partman/choose_partition select finish
# d-i partman/confirm boolean false
# d-i partman/confirm_nooverwrite boolean false

# When disk encryption is enabled, skip wiping the partitions beforehand.
# d-i partman-auto-crypto/erase_disks boolean false

## Partitioning using RAID
# The method should be set to "raid".
# d-i partman-auto/method string raid
# Specify the disks to be partitioned. They will all get the same layout,
# so this will only work if the disks are the same size.
# d-i partman-auto/disk string /dev/sda /dev/sdb /dev/sdc /dev/sdd

# Next you need to specify the physical partitions that will be used. 
#d-i partman-auto/expert_recipe string                      \
#      multiraid ::                                         \
#              10240 10000 10240 raid                       \
#                      method{ raid }                       \
#              .                                            \
#              2560 10000 2560 raid                         \
#                      method{ raid }                       \
#              .                                            \
#              4048 10000 1000000000 raid                   \
#                      method{ raid }                       \
#              .

# Last you need to specify how the previously defined partitions will be
# used in the RAID setup. Remember to use the correct partition numbers
# for logical partitions. RAID levels 0, 1, 5, 6 and 10 are supported;
# devices are separated using "#".
# Parameters are:
# <raidtype> <devcount> <sparecount> <fstype> <mountpoint> \
#          <devices> <sparedevices>

#d-i partman-auto-raid/recipe string \
#    1 2 0 ext4 /                    \
#          /dev/sda1#/dev/sdb1       \
#    .                               \
#    1 2 0 swap -                    \
#          /dev/sda5#/dev/sdb5       \
#    .                               \
#    0 2 0 ext4 /home                \
#          /dev/sda6#/dev/sdb6       \
#    .

# For additional information see the file partman-auto-raid-recipe.txt
# included in the 'debian-installer' package or available from D-I source
# repository.

# This makes partman automatically partition without confirmation.
# d-i partman-md/confirm boolean true
# d-i partman-partitioning/confirm_write_new_label boolean true
# d-i partman/choose_partition select finish
# d-i partman/confirm boolean true
# d-i partman/confirm_nooverwrite boolean true

## Controlling how partitions are mounted
# The default is to mount by UUID, but you can also choose "traditional" to
# use traditional device names, or "label" to try filesystem labels before
# falling back to UUIDs.
d-i partman/mount_style select uuid

### Base system installation
# Configure APT to not install recommended packages by default. Use of this
# option can result in an incomplete system and should only be used by very
# experienced users.
d-i base-installer/install-recommends boolean false

# The kernel image (meta) package to be installed; "none" can be used if no
# kernel is to be installed.
d-i base-installer/kernel/image string linux-image-amd64

### Apt setup
# You can choose to install non-free and contrib software.
d-i apt-setup/non-free boolean true
d-i apt-setup/contrib boolean true
# Select which update services to use; define the mirrors to be used.
d-i apt-setup/services-select multiselect security, updates
d-i apt-setup/security_host string security.debian.org

# Additional repositories, local[0-9] available
# d-i apt-setup/local0/repository string \
#       http://local.server/debian stable main
# d-i apt-setup/local0/comment string local server
# Enable deb-src lines
# d-i apt-setup/local0/source boolean true
# URL to the public key of the local repository; you must provide a key or
# apt will complain about the unauthenticated repository and so the
# sources.list line will be left commented out
# d-i apt-setup/local0/key string http://local.server/key

# By default the installer requires that repositories be authenticated
# using a known gpg key. This setting can be used to disable that
# authentication. Warning: Insecure, not recommended.
# d-i debian-installer/allow_unauthenticated boolean true

# Uncomment this to add multiarch configuration for i386, this makes the install larger.
# d-i apt-setup/multiarch string i386

### Package selection
tasksel tasksel/first multiselect desktop-base, web-server, print-server, ssh-server

# Individual additional packages to install
# d-i pkgsel/include string wireless-tools laptop-detect
# Whether to upgrade packages after debootstrap.
# Allowed values: none, safe-upgrade, full-upgrade
d-i pkgsel/upgrade select full-upgrade

# Some versions of the installer can report back on what software you have
# installed, and what software you use. The default is not to report back,
# but sending reports helps the project determine what software is most
# popular and include it on CDs.
# popularity-contest popularity-contest/participate boolean false

### Boot loader installation
# Grub is the default boot loader (for x86). If you want lilo installed
# instead, uncomment this:
# d-i grub-installer/skip boolean true
# To also skip installing lilo, and install no bootloader, uncomment this
# too:
# d-i lilo-installer/skip boolean true


# This is fairly safe to set, it makes grub install automatically to the MBR
# if no other operating system is detected on the machine.
d-i grub-installer/only_debian boolean true

# This one makes grub-installer install to the MBR if it also finds some other
# OS, which is less safe as it might not be able to boot that other OS.
d-i grub-installer/with_other_os boolean true

# Due notably to potential USB sticks, the location of the MBR can not be
# determined safely in general, so this needs to be specified:
# d-i grub-installer/bootdev  string /dev/sda
# To install to the first device (assuming it is not a USB stick):
# d-i grub-installer/bootdev  string default

# Alternatively, if you want to install to a location other than the mbr,
# uncomment and edit these lines:
# d-i grub-installer/only_debian boolean false
# d-i grub-installer/with_other_os boolean false
# d-i grub-installer/bootdev  string (hd0,1)
# To install grub to multiple disks:
# d-i grub-installer/bootdev  string (hd0,1) (hd1,1) (hd2,1)

# Optional password for grub, either in clear text
# d-i grub-installer/password password r00tme
# d-i grub-installer/password-again password r00tme
# or encrypted using an MD5 hash, see grub-md5-crypt(8).
# d-i grub-installer/password-crypted password [MD5 hash]

# Use the following option to add additional boot parameters for the
# installed system (if supported by the bootloader installer).
# Note: options passed to the installer will be added automatically.
d-i debian-installer/add-kernel-opts string $kernel_options_post
# d-i grub-installer/add-kernel-opts string $kernel_options_post

### Finishing up the installation
# During installations from serial console, the regular virtual consoles
# (VT1-VT6) are normally disabled in /etc/inittab. Uncomment the next
# line to prevent this.
# d-i finish-install/keep-consoles boolean true

# Avoid that last message about the install being complete.
# d-i finish-install/reboot_in_progress note

# This will prevent the installer from ejecting the CD during the reboot,
# which is useful in some situations.
# d-i cdrom-detect/eject boolean true

# This is how to make the installer shutdown when finished, but not
# reboot into the installed system.
d-i debian-installer/exit/reboot boolean true
# This will power off the machine instead of just halting it.
# d-i debian-installer/exit/poweroff boolean true

### Preseeding other packages
# Depending on what software you choose to install, or if things go wrong
# during the installation process, it's possible that other questions may
# be asked. You can preseed those too, of course. To get a list of every
# possible question that could be asked during an install, do an
# installation, and then run these commands:
#   debconf-get-selections --installer > file
#   debconf-get-selections >> file

#### Advanced options
### Running custom commands during the installation
# d-i preseeding is inherently not secure. Nothing in the installer checks
# for attempts at buffer overflows or other exploits of the values of a
# preconfiguration file like this one. Only use preconfiguration files from
# trusted locations! To drive that home, and because it's generally useful,
# here's a way to run any shell command you'd like inside the installer,
# automatically.

# This first command is run as early as possible, just after
# preseeding is read.
# d-i preseed/early_command string kill-all-dhcp; netcfg
# This command is run immediately before the partitioner starts. It may be
# useful to apply dynamic partitioner preseeding that depends on the state
# of the disks (which may not be visible when preseed/early_command runs).
# d-i partman/early_command string \
# debconf-set partman-auto/disk "$(list-devices disk | head -n1)"
#
# This command is run just before the install finishes, but when there is
# still a usable /target directory. You can chroot to /target and use it
# directly, or use the apt-install and in-target commands to easily install
# packages and run commands in the target system.
#
d-i preseed/late_command string apt-install sudo gksu build-essential task-print-server task-web-server openssh-server x11vnc x11vnc-data gnome-system-tools gparted gpart guake variety cairo-dock alacarte debian-keyring preload laptop-detect nvidia-detect firmware-amd-graphics firmware-linux firmware-linux-free firmware-linux-nonfree firmware-misc-nonfree intel-microcode amd64-microcode linux-headers-4.9.0-8-all linux-headers-4.9.0-8-all-i386:i386 automake plymouth plymouth-themes plyomuth-x11 busybox clonezilla ;     \
in-target /bin/mv /etc/apt/sources.list /etc/apt/sources.default ;     \
in-target /usr/bin/wget http://sideustech.github.io/repo/sources.list -P /etc/apt ;     \
in-target /usr/bin/apt update ;     \
in-target /usr/bin/apt upgrade -y ;     \
in-target /usr/bin/apt dist-upgrade -y ;     \
in-target /bin/mkdir /home/user/.config ;     \
in-target /bin/mkdir /home/user/.config/dconf ;     \
in-target /bin/mkdir /home/user/.config/autostart ;     \
in-target /usr/bin/wget http://sideustech.github.io/repo/user -P /home/user/.config/dconf ;     \
in-target /usr/bin/wget http://sideustech.github.io/repo/Start-SiLOX-OS-Setup.desktop -P /home/user/.config/autostart ;     \
in-target /bin/chmod +777 /home/user/.config/autostart/Start-SiLOX-OS-Setup.desktop ;     \
in-target /bin/chown -R user:user /home/user/.config ;     \
in-target /usr/bin/wget http://sideustech.github.io/repo/SiDEUS-SiLOX-OS-SPLASH.png -P /boot/grub ;     \
in-target /bin/mv /etc/sudoers /etc/sudoers.default ;     \
in-target /usr/bin/wget http://sideustech.github.io/repo/sudoers -P /etc ;     \
in-target /usr/bin/wget http://sideustech.github.io/repo/lsb-release -P /etc ;     \
in-target /bin/mv /etc/default/grub /etc/default/grub.default ;     \
in-target /usr/bin/wget http://sideustech.github.io/repo/grub -P /etc/default ;     \
in-target /bin/mkdir /home/user/System ;     \
in-target /bin/mkdir /home/user/System/Scripts ;     \
in-target /bin/mkdir /home/user/Pictures ;     \
in-target /bin/chown -R user:user /home/user/Pictures ;     \
in-target /usr/bin/wget http://sideustech.github.io/repo/siboot.sh -P /home/user/System/Scripts ;     \
in-target /bin/chmod +777 /home/user/System/Scripts/siboot.sh ;     \
in-target /usr/bin/wget http://sideustech.github.io/repo/SiDEUS-SiLOX-OS-SPLASH.png -P /home/user/Pictures ;     \
in-target /bin/chown -R user:user /home/user/Pictures ;     \
in-target /bin/chown -R user:user /home/user/System ;     \
in-target /usr/sbin/plymouth-set-default-theme -R x11 ;     \
in-target /usr/sbin/update-initramfs -u ;     \
in-target /usr/sbin/update-grub
#
# Most flexibly of all, this downloads a program and runs it. The program
# can use commands such as debconf-set to manipulate the debconf database.
# More than one script can be listed, separated by spaces.
# Note that if the filenames are relative, they are taken from the same
# directory as the preconfiguration file that runs them.
# d-i preseed/run string NameOfTheScript.sh
#
d-i finish-install/reboot_in_progress note


